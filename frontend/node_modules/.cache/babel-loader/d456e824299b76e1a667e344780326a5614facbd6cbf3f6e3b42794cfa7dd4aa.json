{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brays\\\\Documents\\\\Projects\\\\JapaneseLanguageApp\\\\japanese-language-app\\\\frontend\\\\src\\\\components\\\\WordRevision.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport './WordRevision.css'; // Add your styling for the component\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction WordRevision() {\n  _s();\n  const [words, setWords] = useState([]);\n  const [currentWord, setCurrentWord] = useState(null);\n  const [score, setScore] = useState(0);\n  const [userInput, setUserInput] = useState('');\n  const [feedback, setFeedback] = useState('');\n  useEffect(() => {\n    axios.get('http://localhost:5000/api/japanese-words').then(response => {\n      const parsedWords = JSON.parse(response.data); // Parse the JSON data\n      setWords(parsedWords.words); // Assuming 'words' is the key containing your list\n      setCurrentWord(getRandomWord(parsedWords.words));\n    }).catch(error => console.error('Error fetching words:', error));\n  }, []);\n  const getRandomWord = wordsArray => {\n    const randomIndex = Math.floor(Math.random() * wordsArray.length);\n    return wordsArray[randomIndex];\n  };\n  const checkAnswer = () => {\n    if (currentWord && userInput.toLowerCase() === currentWord.romaji.toLowerCase()) {\n      setFeedback('Correct!');\n      setScore(score + 1); // Increment score for correct answer\n    } else {\n      setFeedback(`Incorrect. The correct answer is ${currentWord.romaji}.`);\n    }\n  };\n  const nextWord = () => {\n    setCurrentWord(getRandomWord(words));\n    setUserInput('');\n    setFeedback('');\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"word-revision-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Word Revision\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), currentWord ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"word-revision\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"word\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: [\"Kanji: \", currentWord.kanji]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Hiragana: \", currentWord.hiragana]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [\"Meaning: \", currentWord.meaning]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: userInput,\n          onChange: e => setUserInput(e.target.value),\n          placeholder: \"Type the romaji\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: checkAnswer,\n          children: \"Check Answer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: nextWord,\n          children: \"Next Word\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: feedback\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"score\",\n        children: /*#__PURE__*/_jsxDEV(\"h4\", {\n          children: [\"Score: \", score]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 61,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading words...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n}\n_s(WordRevision, \"p/AgzdbuUw7JrbiomSaL+QT8f50=\");\n_c = WordRevision;\nexport default WordRevision;\nvar _c;\n$RefreshReg$(_c, \"WordRevision\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","WordRevision","_s","words","setWords","currentWord","setCurrentWord","score","setScore","userInput","setUserInput","feedback","setFeedback","get","then","response","parsedWords","JSON","parse","data","getRandomWord","catch","error","console","wordsArray","randomIndex","Math","floor","random","length","checkAnswer","toLowerCase","romaji","nextWord","className","children","fileName","_jsxFileName","lineNumber","columnNumber","kanji","hiragana","meaning","type","value","onChange","e","target","placeholder","onClick","_c","$RefreshReg$"],"sources":["C:/Users/brays/Documents/Projects/JapaneseLanguageApp/japanese-language-app/frontend/src/components/WordRevision.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport './WordRevision.css'; // Add your styling for the component\r\n\r\nfunction WordRevision() {\r\n  const [words, setWords] = useState([]);\r\n  const [currentWord, setCurrentWord] = useState(null);\r\n  const [score, setScore] = useState(0);\r\n  const [userInput, setUserInput] = useState('');\r\n  const [feedback, setFeedback] = useState('');\r\n\r\n  useEffect(() => {\r\n    axios.get('http://localhost:5000/api/japanese-words')\r\n      .then(response => {\r\n        const parsedWords = JSON.parse(response.data); // Parse the JSON data\r\n        setWords(parsedWords.words);  // Assuming 'words' is the key containing your list\r\n        setCurrentWord(getRandomWord(parsedWords.words));\r\n      })\r\n      .catch(error => console.error('Error fetching words:', error));\r\n  }, []);\r\n\r\n  const getRandomWord = (wordsArray) => {\r\n    const randomIndex = Math.floor(Math.random() * wordsArray.length);\r\n    return wordsArray[randomIndex];\r\n  };\r\n\r\n  const checkAnswer = () => {\r\n    if (currentWord && userInput.toLowerCase() === currentWord.romaji.toLowerCase()) {\r\n      setFeedback('Correct!');\r\n      setScore(score + 1); // Increment score for correct answer\r\n    } else {\r\n      setFeedback(`Incorrect. The correct answer is ${currentWord.romaji}.`);\r\n    }\r\n  };\r\n\r\n  const nextWord = () => {\r\n    setCurrentWord(getRandomWord(words));\r\n    setUserInput('');\r\n    setFeedback('');\r\n  };\r\n\r\n  return (\r\n    <div className=\"word-revision-container\">\r\n      <h2>Word Revision</h2>\r\n      {currentWord ? (\r\n        <div className=\"word-revision\">\r\n          <div className=\"word\">\r\n            <h3>Kanji: {currentWord.kanji}</h3>\r\n            <h4>Hiragana: {currentWord.hiragana}</h4>\r\n            <p>Meaning: {currentWord.meaning}</p>\r\n            <input\r\n              type=\"text\"\r\n              value={userInput}\r\n              onChange={(e) => setUserInput(e.target.value)}\r\n              placeholder=\"Type the romaji\"\r\n            />\r\n            <button onClick={checkAnswer}>Check Answer</button>\r\n            <button onClick={nextWord}>Next Word</button>\r\n            <p>{feedback}</p>\r\n          </div>\r\n          <div className=\"score\">\r\n            <h4>Score: {score}</h4>\r\n          </div>\r\n        </div>\r\n      ) : (\r\n        <p>Loading words...</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default WordRevision;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}