{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brays\\\\Documents\\\\Projects\\\\JapaneseLanguageApp\\\\japanese-language-app\\\\frontend\\\\src\\\\components\\\\Flashcards.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './Flashcards.css'; // We'll create the CSS for the flip effect\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Flashcards({\n  hiragana,\n  katakana\n}) {\n  _s();\n  const [flipped, setFlipped] = useState({});\n  const handleClick = index => {\n    setFlipped(prevState => ({\n      ...prevState,\n      [index]: !prevState[index] // Toggle the flip state for the clicked card\n    }));\n  };\n\n  // Render a loading state if no characters are passed\n  if (!Array.isArray(hiragana) || !Array.isArray(katakana)) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flashcards-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flashcard-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Hiragana\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flashcard-container\",\n        children: hiragana.map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flashcard\",\n          onClick: () => handleClick(index) // Flip the card when clicked\n          ,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `flashcard-inner ${flipped[index] ? 'flipped' : ''}`,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flashcard-front\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: card.character\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 35,\n                columnNumber: 19\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 34,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flashcard-back\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: card.romaji\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 38,\n                columnNumber: 19\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 31,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flashcard-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Katakana\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flashcard-container\",\n        children: katakana.map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flashcard\",\n          onClick: () => handleClick(index) // Flip the card when clicked\n          ,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `flashcard-inner ${flipped[index] ? 'flipped' : ''}`,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flashcard-front\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: card.character\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 19\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 59,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flashcard-back\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: card.romaji\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 63,\n                columnNumber: 19\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 17\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 15\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 20,\n    columnNumber: 5\n  }, this);\n}\n_s(Flashcards, \"8YfatOl9b3wsa8rMWg3st9lHxIs=\");\n_c = Flashcards;\nexport default Flashcards;\nvar _c;\n$RefreshReg$(_c, \"Flashcards\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Flashcards","hiragana","katakana","_s","flipped","setFlipped","handleClick","index","prevState","Array","isArray","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","card","onClick","character","romaji","_c","$RefreshReg$"],"sources":["C:/Users/brays/Documents/Projects/JapaneseLanguageApp/japanese-language-app/frontend/src/components/Flashcards.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './Flashcards.css'; // We'll create the CSS for the flip effect\r\n\r\nfunction Flashcards({ hiragana, katakana }) {\r\n  const [flipped, setFlipped] = useState({});\r\n\r\n  const handleClick = (index) => {\r\n    setFlipped((prevState) => ({\r\n      ...prevState,\r\n      [index]: !prevState[index], // Toggle the flip state for the clicked card\r\n    }));\r\n  };\r\n\r\n  // Render a loading state if no characters are passed\r\n  if (!Array.isArray(hiragana) || !Array.isArray(katakana)) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"flashcards-wrapper\">\r\n      {/* Hiragana Flashcards */}\r\n      <div className=\"flashcard-group\">\r\n        <h2>Hiragana</h2>\r\n        <div className=\"flashcard-container\">\r\n          {hiragana.map((card, index) => (\r\n            <div\r\n              className=\"flashcard\"\r\n              key={index}\r\n              onClick={() => handleClick(index)} // Flip the card when clicked\r\n            >\r\n              <div\r\n                className={`flashcard-inner ${flipped[index] ? 'flipped' : ''}`}\r\n              >\r\n                <div className=\"flashcard-front\">\r\n                  <h2>{card.character}</h2> {/* Japanese character (Hiragana) */}\r\n                </div>\r\n                <div className=\"flashcard-back\">\r\n                  <h3>{card.romaji}</h3> {/* English sound (romaji) */}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Katakana Flashcards */}\r\n      <div className=\"flashcard-group\">\r\n        <h2>Katakana</h2>\r\n        <div className=\"flashcard-container\">\r\n          {katakana.map((card, index) => (\r\n            <div\r\n              className=\"flashcard\"\r\n              key={index}\r\n              onClick={() => handleClick(index)} // Flip the card when clicked\r\n            >\r\n              <div\r\n                className={`flashcard-inner ${flipped[index] ? 'flipped' : ''}`}\r\n              >\r\n                <div className=\"flashcard-front\">\r\n                  <h2>{card.character}</h2> {/* Japanese character (Katakana) */}\r\n                </div>\r\n                <div className=\"flashcard-back\">\r\n                  <h3>{card.romaji}</h3> {/* English sound (romaji) */}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Flashcards;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}