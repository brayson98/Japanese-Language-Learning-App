{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brays\\\\Documents\\\\Projects\\\\JapaneseLanguageApp\\\\japanese-language-app\\\\frontend\\\\src\\\\components\\\\RandomWord.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport './RandomWord.css'; // Optional for styling\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction RandomWord() {\n  _s();\n  const [wordData, setWordData] = useState(null);\n  const [error, setError] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const fetchRandomWord = async () => {\n    setLoading(true);\n    setError(null);\n    try {\n      const response = await fetch('http://localhost:5000/api/japanese/random_word');\n      if (!response.ok) {\n        throw new Error(`Error: ${response.statusText}`);\n      }\n      const data = await response.json();\n      setWordData(data);\n    } catch (err) {\n      setError(err.message);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const fs = require('fs');\n  const textToSpeech = require('@google-cloud/text-to-speech');\n  const client = new textToSpeech.TextToSpeechClient();\n  async function synthesizeSpeech() {\n    const request = {\n      input: {\n        text: 'こんにちは'\n      },\n      // Japanese word or sentence\n      voice: {\n        languageCode: 'ja-JP',\n        ssmlGender: 'NEUTRAL'\n      },\n      audioConfig: {\n        audioEncoding: 'MP3'\n      }\n    };\n    const [response] = await client.synthesizeSpeech(request);\n    fs.writeFileSync('output.mp3', response.audioContent, 'binary');\n    console.log('Audio content written to file: output.mp3');\n  }\n  useEffect(() => {\n    fetchRandomWord();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"random-word-container\",\n    children: [loading && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 23\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [\"Error: \", error]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 21\n    }, this), wordData && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"random-word\",\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: wordData.word || 'No Word Available'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Reading: \", wordData.reading]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Definition: \", wordData.definition]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Romaji: \", wordData.romaji]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: fetchRandomWord,\n        children: \"Get Another Word\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => speakWord(wordData.romaji),\n        children: \"How to pronounce\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 15\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n}\n_s(RandomWord, \"F0P0Vk31OBfs5rkcDFHFWy09xfA=\");\n_c = RandomWord;\nexport default RandomWord;\nvar _c;\n$RefreshReg$(_c, \"RandomWord\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","RandomWord","_s","wordData","setWordData","error","setError","loading","setLoading","fetchRandomWord","response","fetch","ok","Error","statusText","data","json","err","message","fs","require","textToSpeech","client","TextToSpeechClient","synthesizeSpeech","request","input","text","voice","languageCode","ssmlGender","audioConfig","audioEncoding","writeFileSync","audioContent","console","log","className","children","fileName","_jsxFileName","lineNumber","columnNumber","word","reading","definition","romaji","onClick","speakWord","_c","$RefreshReg$"],"sources":["C:/Users/brays/Documents/Projects/JapaneseLanguageApp/japanese-language-app/frontend/src/components/RandomWord.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport './RandomWord.css'; // Optional for styling\r\n\r\nfunction RandomWord() {\r\n    const [wordData, setWordData] = useState(null)\r\n    const [error, setError] = useState(null)\r\n    const [loading, setLoading] = useState(true)\r\n\r\n    const fetchRandomWord = async () => {\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        try {\r\n            const response = await fetch('http://localhost:5000/api/japanese/random_word');\r\n            if (!response.ok) {\r\n              throw new Error(`Error: ${response.statusText}`);\r\n            }\r\n            const data = await response.json();\r\n            setWordData(data);\r\n          } catch (err) {\r\n            setError(err.message);\r\n          } finally {\r\n            setLoading(false);\r\n          }\r\n    }\r\n\r\n    const fs = require('fs');\r\n    const textToSpeech = require('@google-cloud/text-to-speech');\r\n    const client = new textToSpeech.TextToSpeechClient();\r\n\r\n    async function synthesizeSpeech() {\r\n      const request = {\r\n        input: { text: 'こんにちは' },  // Japanese word or sentence\r\n        voice: { languageCode: 'ja-JP', ssmlGender: 'NEUTRAL' },\r\n        audioConfig: { audioEncoding: 'MP3' },\r\n      };\r\n\r\n      const [response] = await client.synthesizeSpeech(request);\r\n\r\n      fs.writeFileSync('output.mp3', response.audioContent, 'binary');\r\n      console.log('Audio content written to file: output.mp3');\r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchRandomWord();\r\n    }, []); \r\n\r\n    return (\r\n        <div className=\"random-word-container\">\r\n          {loading && <p>Loading...</p>}\r\n          {error && <p>Error: {error}</p>}\r\n          {wordData && (\r\n            <div className=\"random-word\">\r\n              <h1>{wordData.word || 'No Word Available'}</h1>\r\n              <p>Reading: {wordData.reading}</p>\r\n              <p>Definition: {wordData.definition}</p>\r\n              <p>Romaji: {wordData.romaji}</p>\r\n              <button onClick={fetchRandomWord}>Get Another Word</button>\r\n              <button onClick={() => speakWord(wordData.romaji)}>How to pronounce</button>\r\n            </div>\r\n          )}\r\n        </div>\r\n      );\r\n}\r\n\r\nexport default RandomWord;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}