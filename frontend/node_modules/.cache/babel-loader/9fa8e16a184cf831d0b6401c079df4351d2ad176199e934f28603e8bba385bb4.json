{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brays\\\\Documents\\\\Projects\\\\JapaneseLanguageApp\\\\japanese-language-app\\\\frontend\\\\src\\\\components\\\\Flashcards.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './Flashcards.css'; // We'll create the CSS for the flip effect\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Flashcards({\n  characters\n}) {\n  _s();\n  const [flipped, setFlipped] = useState({});\n  const handleClick = index => {\n    setFlipped(prevState => ({\n      ...prevState,\n      [index]: !prevState[index] // Toggle the flip state for the clicked card\n    }));\n  };\n  if (!Array.isArray(characters)) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 15,\n      columnNumber: 12\n    }, this); // Show loading state if data is not available\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flashcard-container\",\n    children: characters.map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flashcard\",\n      onClick: () => handleClick(index) // Flip the card when clicked\n      ,\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: `flashcard-inner ${flipped[index] ? 'flipped' : ''}`,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flashcard-front\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            children: card.character\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 15\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 29,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flashcard-back\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: card.romaji\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 33,\n            columnNumber: 15\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 11\n      }, this)\n    }, index, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n}\n_s(Flashcards, \"8YfatOl9b3wsa8rMWg3st9lHxIs=\");\n_c = Flashcards;\nexport default Flashcards;\nvar _c;\n$RefreshReg$(_c, \"Flashcards\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Flashcards","characters","_s","flipped","setFlipped","handleClick","index","prevState","Array","isArray","children","fileName","_jsxFileName","lineNumber","columnNumber","className","map","card","onClick","character","romaji","_c","$RefreshReg$"],"sources":["C:/Users/brays/Documents/Projects/JapaneseLanguageApp/japanese-language-app/frontend/src/components/Flashcards.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './Flashcards.css'; // We'll create the CSS for the flip effect\r\n\r\nfunction Flashcards({ characters }) {\r\n  const [flipped, setFlipped] = useState({});\r\n\r\n  const handleClick = (index) => {\r\n    setFlipped((prevState) => ({\r\n      ...prevState,\r\n      [index]: !prevState[index], // Toggle the flip state for the clicked card\r\n    }));\r\n  };\r\n\r\n  if (!Array.isArray(characters)) {\r\n    return <div>Loading...</div>; // Show loading state if data is not available\r\n  }\r\n\r\n  return (\r\n    <div className=\"flashcard-container\">\r\n      {characters.map((card, index) => (\r\n        <div\r\n          className=\"flashcard\"\r\n          key={index}\r\n          onClick={() => handleClick(index)} // Flip the card when clicked\r\n        >\r\n          <div\r\n            className={`flashcard-inner ${flipped[index] ? 'flipped' : ''}`}\r\n          >\r\n            <div className=\"flashcard-front\">\r\n              <h2>{card.character}</h2> {/* Japanese character (Hiragana/Katakana) */}\r\n            </div>\r\n            <div className=\"flashcard-back\">\r\n              <h3>{card.romaji}</h3> {/* English sound (romaji) */}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ))}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Flashcards;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,kBAAkB,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE3B,SAASC,UAAUA,CAAC;EAAEC;AAAW,CAAC,EAAE;EAAAC,EAAA;EAClC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGP,QAAQ,CAAC,CAAC,CAAC,CAAC;EAE1C,MAAMQ,WAAW,GAAIC,KAAK,IAAK;IAC7BF,UAAU,CAAEG,SAAS,KAAM;MACzB,GAAGA,SAAS;MACZ,CAACD,KAAK,GAAG,CAACC,SAAS,CAACD,KAAK,CAAC,CAAE;IAC9B,CAAC,CAAC,CAAC;EACL,CAAC;EAED,IAAI,CAACE,KAAK,CAACC,OAAO,CAACR,UAAU,CAAC,EAAE;IAC9B,oBAAOF,OAAA;MAAAW,QAAA,EAAK;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,CAAC,CAAC;EAChC;EAEA,oBACEf,OAAA;IAAKgB,SAAS,EAAC,qBAAqB;IAAAL,QAAA,EACjCT,UAAU,CAACe,GAAG,CAAC,CAACC,IAAI,EAAEX,KAAK,kBAC1BP,OAAA;MACEgB,SAAS,EAAC,WAAW;MAErBG,OAAO,EAAEA,CAAA,KAAMb,WAAW,CAACC,KAAK,CAAE,CAAC;MAAA;MAAAI,QAAA,eAEnCX,OAAA;QACEgB,SAAS,EAAE,mBAAmBZ,OAAO,CAACG,KAAK,CAAC,GAAG,SAAS,GAAG,EAAE,EAAG;QAAAI,QAAA,gBAEhEX,OAAA;UAAKgB,SAAS,EAAC,iBAAiB;UAAAL,QAAA,gBAC9BX,OAAA;YAAAW,QAAA,EAAKO,IAAI,CAACE;UAAS;YAAAR,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,KAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvB,CAAC,eACNf,OAAA;UAAKgB,SAAS,EAAC,gBAAgB;UAAAL,QAAA,gBAC7BX,OAAA;YAAAW,QAAA,EAAKO,IAAI,CAACG;UAAM;YAAAT,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,KAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpB,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACH;IAAC,GAZDR,KAAK;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAaP,CACN;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV;AAACZ,EAAA,CApCQF,UAAU;AAAAqB,EAAA,GAAVrB,UAAU;AAsCnB,eAAeA,UAAU;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}