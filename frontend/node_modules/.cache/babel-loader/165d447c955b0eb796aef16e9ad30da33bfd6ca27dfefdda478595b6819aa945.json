{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brays\\\\Documents\\\\Projects\\\\JapaneseLanguageApp\\\\japanese-language-app\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\n// Assuming you have a parent component or App component where you handle fetching data\n\nimport React, { useState, useEffect } from 'react';\nimport Flashcards from './components/Flashcards';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [hiragana, setHiragana] = useState([]);\n  const [katakana, setKatakana] = useState([]);\n  useEffect(() => {\n    axios.get('http://localhost:5000/api/japanese/characters').then(response => {\n      setHiragana(response.data.hiragana); // Assuming data.hiragana is an array\n      setKatakana(response.data.katakana); // Assuming data.katakana is an array\n    }).catch(error => {\n      console.error(\"Error fetching characters:\", error);\n    });\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Japanese Learning Flashcards\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Flashcards, {\n      hiragana: hiragana,\n      katakana: katakana\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"TumvOYCYJHf8gIoZ2Q2cHYxJQTw=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","Flashcards","axios","jsxDEV","_jsxDEV","App","_s","hiragana","setHiragana","katakana","setKatakana","get","then","response","data","catch","error","console","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/brays/Documents/Projects/JapaneseLanguageApp/japanese-language-app/frontend/src/App.js"],"sourcesContent":["// Assuming you have a parent component or App component where you handle fetching data\n\nimport React, { useState, useEffect } from 'react';\nimport Flashcards from './components/Flashcards';\nimport axios from 'axios';\n\nfunction App() {\n  const [hiragana, setHiragana] = useState([]);\n  const [katakana, setKatakana] = useState([]);\n\n  useEffect(() => {\n    axios.get('http://localhost:5000/api/japanese/characters')\n      .then((response) => {\n        setHiragana(response.data.hiragana); // Assuming data.hiragana is an array\n        setKatakana(response.data.katakana); // Assuming data.katakana is an array\n      })\n      .catch((error) => {\n        console.error(\"Error fetching characters:\", error);\n      });\n  }, []);\n\n  return (\n    <div>\n      <h1>Japanese Learning Flashcards</h1>\n      <Flashcards hiragana={hiragana} katakana={katakana} />\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA;;AAEA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,UAAU,MAAM,yBAAyB;AAChD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACU,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACdE,KAAK,CAACS,GAAG,CAAC,+CAA+C,CAAC,CACvDC,IAAI,CAAEC,QAAQ,IAAK;MAClBL,WAAW,CAACK,QAAQ,CAACC,IAAI,CAACP,QAAQ,CAAC,CAAC,CAAC;MACrCG,WAAW,CAACG,QAAQ,CAACC,IAAI,CAACL,QAAQ,CAAC,CAAC,CAAC;IACvC,CAAC,CAAC,CACDM,KAAK,CAAEC,KAAK,IAAK;MAChBC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IACpD,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEZ,OAAA;IAAAc,QAAA,gBACEd,OAAA;MAAAc,QAAA,EAAI;IAA4B;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACrClB,OAAA,CAACH,UAAU;MAACM,QAAQ,EAAEA,QAAS;MAACE,QAAQ,EAAEA;IAAS;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnD,CAAC;AAEV;AAAChB,EAAA,CArBQD,GAAG;AAAAkB,EAAA,GAAHlB,GAAG;AAuBZ,eAAeA,GAAG;AAAC,IAAAkB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}