{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brays\\\\Documents\\\\Projects\\\\JapaneseLanguageApp\\\\japanese-language-app\\\\frontend\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport Flashcards from './components/Flashcards';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [characters, setCharacters] = useState([]);\n  useEffect(() => {\n    const fetchCharacters = async () => {\n      try {\n        const response = await axios.get('http://localhost:5000/api/japanese/characters');\n        const {\n          hiragana,\n          katakana\n        } = response.data; // Destructure the hiragana and katakana arrays\n        setCharacters([...hiragana, ...katakana]); // Combine both arrays into one\n      } catch (error) {\n        console.error('Error fetching characters:', error);\n      }\n    };\n    fetchCharacters();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Japanese Flashcards\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this), Array.isArray(characters) && /*#__PURE__*/_jsxDEV(Flashcards, {\n      characters: characters\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 26,\n      columnNumber: 37\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Lpb9AbqKJ07+xuj4aZ1twNw87e0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useEffect","useState","axios","Flashcards","jsxDEV","_jsxDEV","App","_s","characters","setCharacters","fetchCharacters","response","get","hiragana","katakana","data","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","Array","isArray","_c","$RefreshReg$"],"sources":["C:/Users/brays/Documents/Projects/JapaneseLanguageApp/japanese-language-app/frontend/src/App.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport Flashcards from './components/Flashcards';\n\nfunction App() {\n  const [characters, setCharacters] = useState([]);\n\n  useEffect(() => {\n    const fetchCharacters = async () => {\n      try {\n        const response = await axios.get('http://localhost:5000/api/japanese/characters');\n        const { hiragana, katakana } = response.data; // Destructure the hiragana and katakana arrays\n        setCharacters([...hiragana, ...katakana]); // Combine both arrays into one\n      } catch (error) {\n        console.error('Error fetching characters:', error);\n      }\n    };\n\n    fetchCharacters();\n  }, []);\n\n  return (\n    <div className=\"App\">\n      <h1>Japanese Flashcards</h1>\n      {/* Pass the combined characters array to Flashcards component */}\n      {Array.isArray(characters) && <Flashcards characters={characters} />}\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,UAAU,MAAM,yBAAyB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEjD,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEhDD,SAAS,CAAC,MAAM;IACd,MAAMU,eAAe,GAAG,MAAAA,CAAA,KAAY;MAClC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAG,CAAC,+CAA+C,CAAC;QACjF,MAAM;UAAEC,QAAQ;UAAEC;QAAS,CAAC,GAAGH,QAAQ,CAACI,IAAI,CAAC,CAAC;QAC9CN,aAAa,CAAC,CAAC,GAAGI,QAAQ,EAAE,GAAGC,QAAQ,CAAC,CAAC,CAAC,CAAC;MAC7C,CAAC,CAAC,OAAOE,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;MACpD;IACF,CAAC;IAEDN,eAAe,CAAC,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,oBACEL,OAAA;IAAKa,SAAS,EAAC,KAAK;IAAAC,QAAA,gBAClBd,OAAA;MAAAc,QAAA,EAAI;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAE3BC,KAAK,CAACC,OAAO,CAACjB,UAAU,CAAC,iBAAIH,OAAA,CAACF,UAAU;MAACK,UAAU,EAAEA;IAAW;MAAAY,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACjE,CAAC;AAEV;AAAChB,EAAA,CAxBQD,GAAG;AAAAoB,EAAA,GAAHpB,GAAG;AA0BZ,eAAeA,GAAG;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}