{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brays\\\\Documents\\\\Projects\\\\JapaneseLanguageApp\\\\japanese-language-app\\\\frontend\\\\src\\\\pages\\\\VocabRevision.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport './VocabRevision.css';\nimport VocabFlashcard from '../components/VocabFlashcard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction VocabRevision() {\n  _s();\n  const [words, setWords] = useState([]);\n  const [category, setCategory] = useState('verbs');\n  const [error, setError] = useState(null);\n  const fetchWords = async () => {\n    if (!category) {\n      setError('Please select a category');\n      return;\n    }\n    try {\n      const response = await axios.get(`http://localhost:5000/api/japanese-words?category=${category}`);\n      setWords(response.data);\n      setError(null);\n    } catch (err) {\n      setError('Failed to fetch words');\n    }\n  };\n  useEffect(() => {\n    fetchWords(); // Fetch words whenever the category changes\n  }, [category]); // This effect runs every time 'category' changes\n\n  const handleCategoryChange = e => {\n    setCategory(e.target.value); // Update category when dropdown value changes\n  };\n  const speakWord = async word => {\n    try {\n      const response = await axios.post('http://localhost:5000/speech', {\n        word\n      }, {\n        responseType: 'arraybuffer'\n      });\n      const audioData = response.data;\n      const audioBlob = new Blob([audioData], {\n        type: 'audio/mpeg'\n      });\n      const audioUrl = URL.createObjectURL(audioBlob);\n      const audio = new Audio(audioUrl);\n      audio.play();\n    } catch (error) {\n      console.error('Error with text-to-speech:', error);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"word-revision-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"Word Revision\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"category-selection\",\n      children: [/*#__PURE__*/_jsxDEV(\"label\", {\n        htmlFor: \"category\",\n        children: \"Choose a category:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n        id: \"category\",\n        value: category,\n        onChange: handleCategoryChange,\n        children: [/*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"verbs\",\n          children: \"Verbs\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"animals\",\n          children: \"Animals\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"adjectives\",\n          children: \"Adjectives\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n          value: \"numbers\",\n          children: \"Numbers\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), error && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"error\",\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 17\n    }, this), words.length > 0 ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flashcard-grid\",\n      children: words.map((word, index) => /*#__PURE__*/_jsxDEV(VocabFlashcard, {\n        word: word.kanji || word.hiragana // Show Kanji or Hiragana on the front\n        ,\n        meaning: word.meaning,\n        romaji: word.romaji,\n        furigana: word.hiragana // Furigana for learning Kanji pronunciation\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 70,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"loading\",\n      children: \"Loading words...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(VocabRevision, \"Xlncl2+D0ry6Rol5zl3u8UMhxl8=\");\n_c = VocabRevision;\nexport default VocabRevision;\nvar _c;\n$RefreshReg$(_c, \"VocabRevision\");","map":{"version":3,"names":["React","useEffect","useState","axios","VocabFlashcard","jsxDEV","_jsxDEV","VocabRevision","_s","words","setWords","category","setCategory","error","setError","fetchWords","response","get","data","err","handleCategoryChange","e","target","value","speakWord","word","post","responseType","audioData","audioBlob","Blob","type","audioUrl","URL","createObjectURL","audio","Audio","play","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","onChange","length","map","index","kanji","hiragana","meaning","romaji","furigana","_c","$RefreshReg$"],"sources":["C:/Users/brays/Documents/Projects/JapaneseLanguageApp/japanese-language-app/frontend/src/pages/VocabRevision.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport axios from 'axios';\r\nimport './VocabRevision.css';\r\nimport VocabFlashcard from '../components/VocabFlashcard';\r\n\r\nfunction VocabRevision() {\r\n  const [words, setWords] = useState([]);\r\n  const [category, setCategory] = useState('verbs'); \r\n  const [error, setError] = useState(null);\r\n\r\n  const fetchWords = async () => {\r\n    if (!category) {\r\n      setError('Please select a category');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const response = await axios.get(`http://localhost:5000/api/japanese-words?category=${category}`);\r\n      setWords(response.data);\r\n      setError(null);\r\n    } catch (err) {\r\n      setError('Failed to fetch words');\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchWords(); // Fetch words whenever the category changes\r\n  }, [category]); // This effect runs every time 'category' changes\r\n\r\n  const handleCategoryChange = (e) => {\r\n    setCategory(e.target.value); // Update category when dropdown value changes\r\n  };\r\n\r\n  const speakWord = async (word) => {\r\n    try {\r\n      const response = await axios.post('http://localhost:5000/speech', { word }, { responseType: 'arraybuffer' }); \r\n      const audioData = response.data;\r\n      const audioBlob = new Blob([audioData], { type: 'audio/mpeg' });\r\n      const audioUrl = URL.createObjectURL(audioBlob);\r\n      const audio = new Audio(audioUrl);\r\n      audio.play();\r\n    } catch (error) {\r\n      console.error('Error with text-to-speech:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"word-revision-container\">\r\n      <h2>Word Revision</h2>\r\n\r\n      <div className=\"category-selection\">\r\n        <label htmlFor=\"category\">Choose a category:</label>\r\n        <select\r\n          id=\"category\"\r\n          value={category}\r\n          onChange={handleCategoryChange}\r\n        >\r\n          <option value=\"verbs\">Verbs</option>\r\n          <option value=\"animals\">Animals</option>\r\n          <option value=\"adjectives\">Adjectives</option>\r\n          <option value=\"numbers\">Numbers</option>\r\n        </select>\r\n      </div>\r\n\r\n      {error && <p className=\"error\">{error}</p>}\r\n\r\n      {words.length > 0 ? (\r\n        <div className=\"flashcard-grid\">\r\n          {words.map((word, index) => (\r\n            <VocabFlashcard\r\n              key={index}\r\n              word={word.kanji || word.hiragana} // Show Kanji or Hiragana on the front\r\n              meaning={word.meaning}\r\n              romaji={word.romaji}\r\n              furigana={word.hiragana} // Furigana for learning Kanji pronunciation\r\n            />\r\n          ))}\r\n        </div>\r\n      ) : (\r\n        <p className=\"loading\">Loading words...</p>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default VocabRevision;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}