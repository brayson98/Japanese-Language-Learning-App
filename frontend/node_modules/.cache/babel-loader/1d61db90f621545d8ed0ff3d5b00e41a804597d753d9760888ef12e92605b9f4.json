{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brays\\\\Documents\\\\Projects\\\\JapaneseLanguageApp\\\\japanese-language-app\\\\frontend\\\\src\\\\components\\\\Vocabulary.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Vocabulary() {\n  _s();\n  const [vocabulary, setVocabulary] = useState([]);\n  const fetchVocabulary = async () => {\n    try {\n      const response = await axios.get('http://localhost:5000/vocab');\n      console.log(response.data); // handle the vocabulary data\n    } catch (error) {\n      console.error('Error fetching vocabulary:', error);\n    }\n  };\n  useEffect(() => {\n    fetchVocabulary();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Vocabulary\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: vocabulary.map(item => /*#__PURE__*/_jsxDEV(\"li\", {\n        children: item.data.slug\n      }, item.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 11\n      }, this) // Displaying slug as an example\n      )\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 5\n  }, this);\n}\n_s(Vocabulary, \"FVBzOBUZbhOGx0waedAS0CKSeTw=\");\n_c = Vocabulary;\nexport default Vocabulary;\nvar _c;\n$RefreshReg$(_c, \"Vocabulary\");","map":{"version":3,"names":["React","useState","useEffect","axios","jsxDEV","_jsxDEV","Vocabulary","_s","vocabulary","setVocabulary","fetchVocabulary","response","get","console","log","data","error","children","fileName","_jsxFileName","lineNumber","columnNumber","map","item","slug","id","_c","$RefreshReg$"],"sources":["C:/Users/brays/Documents/Projects/JapaneseLanguageApp/japanese-language-app/frontend/src/components/Vocabulary.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction Vocabulary() {\r\n  const [vocabulary, setVocabulary] = useState([]);\r\n  \r\n \r\nconst fetchVocabulary = async () => {\r\n    try {\r\n        const response = await axios.get('http://localhost:5000/vocab');\r\n        console.log(response.data); // handle the vocabulary data\r\n    } catch (error) {\r\n        console.error('Error fetching vocabulary:', error);\r\n    }\r\n};\r\n\r\nuseEffect(() => {\r\n    fetchVocabulary();\r\n}, []);\r\n  \r\n  return (\r\n    <div>\r\n      <h1>Vocabulary</h1>\r\n      <ul>\r\n        {vocabulary.map((item) => (\r\n          <li key={item.id}>{item.data.slug}</li> // Displaying slug as an example\r\n        ))}\r\n      </ul>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Vocabulary;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,SAASC,UAAUA,CAAA,EAAG;EAAAC,EAAA;EACpB,MAAM,CAACC,UAAU,EAAEC,aAAa,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAGlD,MAAMS,eAAe,GAAG,MAAAA,CAAA,KAAY;IAChC,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMR,KAAK,CAACS,GAAG,CAAC,6BAA6B,CAAC;MAC/DC,OAAO,CAACC,GAAG,CAACH,QAAQ,CAACI,IAAI,CAAC,CAAC,CAAC;IAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;MACZH,OAAO,CAACG,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;IACtD;EACJ,CAAC;EAEDd,SAAS,CAAC,MAAM;IACZQ,eAAe,CAAC,CAAC;EACrB,CAAC,EAAE,EAAE,CAAC;EAEJ,oBACEL,OAAA;IAAAY,QAAA,gBACEZ,OAAA;MAAAY,QAAA,EAAI;IAAU;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,eACnBhB,OAAA;MAAAY,QAAA,EACGT,UAAU,CAACc,GAAG,CAAEC,IAAI,iBACnBlB,OAAA;QAAAY,QAAA,EAAmBM,IAAI,CAACR,IAAI,CAACS;MAAI,GAAxBD,IAAI,CAACE,EAAE;QAAAP,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAsB,CAAC,CAAC;MACzC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACA,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACF,CAAC;AAEV;AAACd,EAAA,CA3BQD,UAAU;AAAAoB,EAAA,GAAVpB,UAAU;AA6BnB,eAAeA,UAAU;AAAC,IAAAoB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}