{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\brays\\\\Documents\\\\Projects\\\\JapaneseLanguageApp\\\\japanese-language-app\\\\frontend\\\\src\\\\components\\\\Flashcards.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './Flashcards.css'; // We'll create the CSS for the flip effect\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Flashcards({\n  hiragana,\n  katakana,\n  type\n}) {\n  _s();\n  const [flippedHiragana, setFlippedHiragana] = useState({});\n  const [flippedKatakana, setFlippedKatakana] = useState({});\n\n  // Function to handle individual card flip\n  const handleClick = (index, group) => {\n    if (group === 'hiragana') {\n      setFlippedHiragana(prevState => ({\n        ...prevState,\n        [index]: !prevState[index] // Toggle the flip state for the clicked card in Hiragana\n      }));\n    } else if (group === 'katakana') {\n      setFlippedKatakana(prevState => ({\n        ...prevState,\n        [index]: !prevState[index] // Toggle the flip state for the clicked card in Katakana\n      }));\n    }\n  };\n\n  // Function to reset flip state of all cards to Japanese character (front side)\n  const resetFlipState = () => {\n    setFlippedHiragana({});\n    setFlippedKatakana({});\n  };\n\n  // Render a loading state if no characters are passed\n  if (!Array.isArray(hiragana) || !Array.isArray(katakana)) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"flashcards-wrapper\",\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: resetFlipState,\n      className: \"reset-button\",\n      children: \"Show Japanese Characters\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), type === 'hiragana' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flashcard-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Hiragana\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flashcard-container\",\n        children: hiragana.map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flashcard\",\n          onClick: () => handleClick(index, 'hiragana') // Flip the Hiragana card when clicked\n          ,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `flashcard-inner ${flippedHiragana[index] ? 'flipped' : ''}`,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flashcard-front\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: card.character\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 56,\n                columnNumber: 21\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 55,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flashcard-back\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: card.romaji\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 59,\n                columnNumber: 21\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this), type === 'katakana' && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"flashcard-group\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Katakana\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flashcard-container\",\n        children: katakana.map((card, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flashcard\",\n          onClick: () => handleClick(index, 'katakana') // Flip the Katakana card when clicked\n          ,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: `flashcard-inner ${flippedKatakana[index] ? 'flipped' : ''}`,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flashcard-front\",\n              children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n                children: card.character\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 83,\n                columnNumber: 21\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 82,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"flashcard-back\",\n              children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n                children: card.romaji\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 86,\n                columnNumber: 21\n              }, this), \" \"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 85,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n_s(Flashcards, \"hLHS6JFo7CD4JoOIK8j6q4cazbI=\");\n_c = Flashcards;\nexport default Flashcards;\nvar _c;\n$RefreshReg$(_c, \"Flashcards\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Flashcards","hiragana","katakana","type","_s","flippedHiragana","setFlippedHiragana","flippedKatakana","setFlippedKatakana","handleClick","index","group","prevState","resetFlipState","Array","isArray","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","map","card","character","romaji","_c","$RefreshReg$"],"sources":["C:/Users/brays/Documents/Projects/JapaneseLanguageApp/japanese-language-app/frontend/src/components/Flashcards.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './Flashcards.css'; // We'll create the CSS for the flip effect\r\n\r\nfunction Flashcards({ hiragana, katakana, type }) {\r\n  const [flippedHiragana, setFlippedHiragana] = useState({});\r\n  const [flippedKatakana, setFlippedKatakana] = useState({});\r\n\r\n  // Function to handle individual card flip\r\n  const handleClick = (index, group) => {\r\n    if (group === 'hiragana') {\r\n      setFlippedHiragana((prevState) => ({\r\n        ...prevState,\r\n        [index]: !prevState[index], // Toggle the flip state for the clicked card in Hiragana\r\n      }));\r\n    } else if (group === 'katakana') {\r\n      setFlippedKatakana((prevState) => ({\r\n        ...prevState,\r\n        [index]: !prevState[index], // Toggle the flip state for the clicked card in Katakana\r\n      }));\r\n    }\r\n  };\r\n\r\n  // Function to reset flip state of all cards to Japanese character (front side)\r\n  const resetFlipState = () => {\r\n    setFlippedHiragana({});\r\n    setFlippedKatakana({});\r\n  };\r\n\r\n  // Render a loading state if no characters are passed\r\n  if (!Array.isArray(hiragana) || !Array.isArray(katakana)) {\r\n    return <div>Loading...</div>;\r\n  }\r\n\r\n  return (\r\n    <div className=\"flashcards-wrapper\">\r\n      {/* Reset Button */}\r\n      <button onClick={resetFlipState} className=\"reset-button\">\r\n        Show Japanese Characters\r\n      </button>\r\n\r\n      {/* Render Hiragana Flashcards only if on Hiragana page */}\r\n      {type === 'hiragana' && (\r\n        <div className=\"flashcard-group\">\r\n          <h2>Hiragana</h2>\r\n          <div className=\"flashcard-container\">\r\n            {hiragana.map((card, index) => (\r\n              <div\r\n                className=\"flashcard\"\r\n                key={index}\r\n                onClick={() => handleClick(index, 'hiragana')} // Flip the Hiragana card when clicked\r\n              >\r\n                <div\r\n                  className={`flashcard-inner ${flippedHiragana[index] ? 'flipped' : ''}`}\r\n                >\r\n                  <div className=\"flashcard-front\">\r\n                    <h2>{card.character}</h2> {/* Japanese character (Hiragana) */}\r\n                  </div>\r\n                  <div className=\"flashcard-back\">\r\n                    <h3>{card.romaji}</h3> {/* English sound (romaji) */}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Render Katakana Flashcards only if on Katakana page */}\r\n      {type === 'katakana' && (\r\n        <div className=\"flashcard-group\">\r\n          <h2>Katakana</h2>\r\n          <div className=\"flashcard-container\">\r\n            {katakana.map((card, index) => (\r\n              <div\r\n                className=\"flashcard\"\r\n                key={index}\r\n                onClick={() => handleClick(index, 'katakana')} // Flip the Katakana card when clicked\r\n              >\r\n                <div\r\n                  className={`flashcard-inner ${flippedKatakana[index] ? 'flipped' : ''}`}\r\n                >\r\n                  <div className=\"flashcard-front\">\r\n                    <h2>{card.character}</h2> {/* Japanese character (Katakana) */}\r\n                  </div>\r\n                  <div className=\"flashcard-back\">\r\n                    <h3>{card.romaji}</h3> {/* English sound (romaji) */}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            ))}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Flashcards;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}